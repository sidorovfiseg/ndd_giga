from aiogram import Router, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import F
import telegram_bot.keyboards.keyboards as kb
from aiogram.utils.keyboard import InlineKeyboardBuilder
from telegram_bot.keyboards.keyboards import return_keyboard

from giga_util.giga_search import Egor

router = Router()


class UserState(StatesGroup):
    start_state = State()
    rubrics_state = State()
    phrases_state = State()
    generation_state = State()


@router.message(Command("start"))
async def start_message(msg: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É ‚úÖ",
        callback_data="start"
    ))
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∞–Ω–Ω–∞—Ç–∞—Ü–∏—é –ø–æ –ø–∞—Ç–µ–Ω—Ç—É - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É ‚úÖ\" –Ω–∏–∂–µ ‚§µ", reply_markup=builder.as_markup())


@router.callback_query(F.data == "start")
async def handle_start_button(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if "count" in user_data:
        await state.set_data({"count": user_data["count"]})
    else:
        await state.set_data({"count": 1})
    await callback.message.answer(text="1 –®–∞–≥. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ –ø–∞—Ç–µ–Ω—Ç—É.")

    await state.set_state(UserState.rubrics_state)
    await callback.answer()




@router.message(UserState.rubrics_state, F.text)
async def process_rubrics(msg: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        callback_data="skip"
    ))
    await state.update_data(req = msg.text)

    await msg.answer("2 –®–ê–ì. –í–≤–µ–¥–∏—Ç–µ 2 –¥–∞—Ç—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –§–æ—Ä–º–∞—Ç: 2 –∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –µ–∑ –∫–∞–≤—ã—á–µ–∫: '20000101 20100101': ",
                     reply_markup = builder.as_markup())
    await state.set_state(UserState.generation_state)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ç–µ–Ω—Ç–∞ TODO –¥–æ–¥–µ–ª–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é


@router.callback_query(UserState.generation_state, F.data == 'skip')
async def handle_skip_button(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(dates = '20000101 20100101')
    user_data = await state.get_data()
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå",
        callback_data="cancel_generation"
    ))

    gen_msg = await callback.message.answer(
        "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º..., –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω. üïê", reply_markup=builder.as_markup()
    )

    req = user_data.get("req")
    dates = user_data.get("dates")

    print(user_data.get("req"))
    print(user_data.get("dates"))

    try:
        if dates != []:
            d1, d2 = dates.split()
            splitted_text = Egor(req, d1, d2)
        else:
            splitted_text = Egor(req)


        await gen_msg.edit_text(f"–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è ‚Ññ{user_data['count']}:", reply_markup=None)
        await state.set_state(UserState.phrases_state)
        user_data["count"] += 1
        await state.update_data(user_data)
        for i in range(len(splitted_text)):
            await callback.message.answer(f"{splitted_text[i]}")

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏
        await callback.message.answer("–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    another_builder = InlineKeyboardBuilder()
    another_builder.add(types.InlineKeyboardButton(
        text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        callback_data="start"
    ))
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", reply_markup=another_builder.as_markup())


@router.message(UserState.generation_state, F.text)
async def generate_patent(msg: Message, state: FSMContext):
    await state.update_data(dates = msg.text)
    user_data = await state.get_data()
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå",
        callback_data="cancel_generation"
    ))

    gen_msg = await msg.answer(
        "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º..., –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω. üïê", reply_markup=builder.as_markup()
    )

    req = user_data.get("req")
    dates = user_data.get("dates")

    print(user_data.get("req"))
    print(user_data.get("dates"))

    try:
        if dates != []:
            d1, d2 = dates.split()
            splitted_text = Egor(req, d1, d2)
        else:
            splitted_text = Egor(req)

        await gen_msg.edit_text(f"–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è ‚Ññ{user_data['count']}:", reply_markup=None)
        await state.set_state(UserState.phrases_state)
        user_data["count"] += 1
        await state.update_data(user_data)
        for i in range(len(splitted_text)):
            await msg.answer(f"{splitted_text[i]}")

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏
        await msg.answer("–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    another_builder = InlineKeyboardBuilder()
    another_builder.add(types.InlineKeyboardButton(
        text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
        callback_data="start"
    ))
    await msg.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", reply_markup=another_builder.as_markup())




